# -*- coding: utf-8 -*-
"""
/***************************************************************************
 VisicomReverseGeocoder
                                 A QGIS plugin
 plugin for reverse geocoding from visicom api
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-09-21
        git sha              : $Format:%H$
        copyright            : (C) 2018 by zimirrr
        email                : zimirrr@mail.ru
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *

from qgis.gui import *
from qgis.core import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .settings_dialog import Config
from .utils import pointToWGS84
from .visicom_api_parser import *
import os.path
import requests


class VisicomReverseGeocoder:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'VisicomReverseGeocoder_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Visicom reverse geocoding')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'VisicomReverseGeocoder')
        self.toolbar.setObjectName(u'VisicomReverseGeocoder')


        # settings from ini file
        self.settings = self.config_read_from_ini(['AUTH_KEY','URL','LANG','CATEGORIES'])

        # memory layer for results
        self.layer = None

        # progressbar when geocoding
        self.bar = QProgressBar()
        self.bar.setRange(0, 0)

        # canvas and point tool
        self.canvas = self.iface.mapCanvas()
        self.mapPointTool = QgsMapToolEmitPoint(self.canvas)
        self.mapPointTool.canvasClicked.connect(self.reverse_geocoding)

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('VisicomReverseGeocoder', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToWebMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = os.path.join(self.plugin_dir, 'icons', 'geocode.png')
        self.add_action(
            icon_path,
            text=self.tr(u'Visicom reverse geocoding'),
            callback=self.run,
            parent=self.iface.mainWindow())

        icon_path = os.path.join(self.plugin_dir, 'icons', 'settings.png')
        self.add_action(
            icon_path,
            text=self.tr(u'Settings'),
            callback=self.show_settings,
            parent=self.iface.mainWindow())

        icon_path = os.path.join(self.plugin_dir, 'icons', 'about.png')
        self.add_action(
            icon_path,
            text=self.tr(u'About'),
            callback=self.show_about,
            parent=self.iface.mainWindow())


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginWebMenu(
                self.tr(u'&Visicom reverse geocoding'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar


    def run(self):
        self.canvas.setMapTool(self.mapPointTool)

    def show_about(self):
        infoString = """<b>Visicom reverse geocoding</b><br><br>
            If the plugin doesn't return result, demo key expired.<br>
            You need to get your own authorithation key <a href=https://api.visicom.ua/docs/terms/key>here</a>.<br><br>
            <a href=https://api.visicom.ua>Read more about Visicom API</a>"""
        QMessageBox.information(self.iface.mainWindow(), "About", infoString)

    def show_settings(self):
        if not bool(self.settings):
            self.settings = self.config_read_from_ini(['AUTH_KEY','URL','LANG','CATEGORIES'])

        dlg = Config(self)
        dlg.visicomKey.insert(self.settings['AUTH_KEY'])
        dlg.show()
        dlg.adjustSize()
        result = dlg.exec_()
        if result == 1:
            self.settings['AUTH_KEY'] = dlg.visicomKey.text()
            self.config_write_to_ini(self.settings)

    def config_read_from_ini(self, settings_list):
        """returns dictionary with keys from settings_list"""
        qgs = QSettings(f'{self.plugin_dir}/{os.path.basename(__file__)[:-3]}.ini', QSettings.IniFormat)
        res = {}
        for item in settings_list:
            res[item] = qgs.value(item)

        return res
    
    def config_write_to_ini(self, settings_dict):
        """writes dictionary into ini file"""
        qgs = QSettings(f'{self.plugin_dir}/{os.path.basename(__file__)[:-3]}.ini', QSettings.IniFormat)
        for k, v in settings_dict.items():
            qgs.setValue(k, v)

    def create_memory_layer(self):
        try:
            _ = self.layer.id()
        except:
            self.layer = None

        if self.layer is None:
            uri = 'Point?crs=epsg:4326&field=full_string:string(255)&index=yes'
            self.layer = QgsVectorLayer(uri, 'visicom_geocoded', 'memory')
            QgsProject.instance().addMapLayer(self.layer)

    def reverse_geocoding(self, point):
        """function that is called when mapTool emits click """
        # add progress bar
        self.iface.mainWindow().statusBar().addWidget(self.bar)
        self.bar.show()

        # if mapCanvas crs not wgs84
        crs = self.canvas.mapSettings().destinationCrs()
        point_wgs84 = pointToWGS84(point, crs)
        coords = f'{point_wgs84.x():.6f},{point_wgs84.y():.6f}'

        cfg = self.settings

        send_params = {
            'key' : cfg['AUTH_KEY'],
            'near' : coords,
            'radius' : 5
        }

        categories = cfg['CATEGORIES']
        url = f'{cfg["URL"]}/{cfg["LANG"]}/search/{categories}.json'
        r = requests.get(url, params=send_params)

        if r.status_code == 200:
            resp = r.json()
            if resp['type'] == 'FeatureCollection':
                allfeatures = parse_featureCollection(resp['features'])
            elif resp['type'] == 'Feature':
                allfeatures = parse_featureCollection((resp,))
    
            result = geocoded_object(allfeatures)

            self.create_memory_layer()

            newfeature = QgsFeature(self.layer.fields())
            newfeature.setGeometry(QgsGeometry.fromPointXY(point_wgs84) )
            newfeature.setAttribute('full_string', result['full_string'])

            self.layer.startEditing()
            self.layer.addFeature(newfeature)
            self.layer.commitChanges()
        else:
            QgsMessageLog.logMessage(
                f'Response status_code is {r.status_code}',
                'Visicom reverse geocoding'
            )

        self.iface.mainWindow().statusBar().removeWidget(self.bar)